import numpy as np
import matplotlib.pyplot as plt
from calculations import *
from data_extraction import extract_wave_data
from navigation import *

# Import wave data
wave_data_files = [["Point1_Hgt.csv", "Point1_Per.csv", "Point1_Dir.csv"],
                   ["Point3_Hgt.csv", "Point3_Per.csv", "Point3_Dir.csv"],
                   ["Point5_Hgt.csv", "Point5_Per.csv", "Point5_Dir.csv"]]

wave_height1, wave_period1, wave_direction1 = extract_wave_data(wave_data_files[0][0], wave_data_files[0][1], wave_data_files[0][2])
wave_height3, wave_period3, wave_direction3 = extract_wave_data(wave_data_files[1][0], wave_data_files[1][1], wave_data_files[1][2])
wave_height5, wave_period5, wave_direction5 = extract_wave_data(wave_data_files[2][0], wave_data_files[2][1], wave_data_files[2][2])

# Calculation parameters for power
V_ship = np.array([1.49999999999999, 1.5926, 1.7963, 2.0000, 2.2963, 2.4907, 2.7963, 2.9907, 3.2963, 3.4815, 3.6759,
                   3.8056, 4.0000, 4.1574, 4.2870, 4.4815, 4.6481, 4.7963, 4.9815, 5.0741, 5.1852, 5.2963, 5.3889,
                   5.4815, 5.7037, 5.8056, 5.9907])
P_E = np.array([0.091019417, 0.121359223, 0.151699029, 0.242718447, 0.333737864, 0.424757282, 0.606796117, 0.72815534,
                1.031553398, 1.243932039, 1.516990291, 1.759708738, 2.39684466, 3.185679612, 4.004854369, 5.248786408,
                6.280339806, 7.281553398, 9.01092233, 10.04247573, 11.49878641, 13.0157767, 14.53276699, 15.77669903,
                18.17354369, 19.14441748, 20.8131068])
w_T = 0.0047  # wake fraction
t = 0.0012  # thrust deduction
eta_R = 1  # relative rotative efficiency
eta_O = 0.55  # open water efficiency (worst case scenario)
eta_T = 0.98  # transmission losses
SCF = 1  # ship correlation factor
margins = 0.3  # sea margin

# Calculate ship power
P_D_model, P_D_ship, P_S, P_I = calculate_power(P_E, V_ship, w_T, t, eta_R, eta_O, eta_T, SCF, margins)

# Coordinates
start_point = (57.141918, -2.067944)
end_point = (57.812859, -0.977633)

# Calculate heading and distance
heading = calculate_direction(start_point, end_point)
distance = calculate_distance(start_point, end_point)

# Route 1 - Total energy calculations
dist_nm = conversion_km_to_nm(distance)
voyage_duration = dist_nm / V_ship
total_energy_req_S = P_S * voyage_duration
total_energy_req_I = P_I * voyage_duration

wave_ship_interaction1 = ((np.array(wave_direction1) + heading) % 180)
angles_january = wave_ship_interaction1[:, 0]

# Define angle ranges
angle_ranges = np.arange(0, 181, 15)

# Initialize an array to store the counts
counts = np.zeros(len(angle_ranges) - 1, dtype=int)

# Loop through the angle ranges and count occurrences
for i in range(len(angle_ranges) - 1):
    start_angle = angle_ranges[i]
    end_angle = angle_ranges[i + 1]
    counts[i] = np.sum((angles_january >= start_angle) & (angles_january < end_angle))

# Print the counts for each range
for i in range(len(angle_ranges) - 1):
    print(f"Count for({angle_ranges[i]}-{angle_ranges[i+1]})degrees:{counts[i]}")


# Print results
print("Wave Data:")
print("Location 1:")
print(f"Wave Height: {wave_height1}")
print(f"Wave Period: {wave_period1}")
print(f"Wave Direction: {wave_direction1}")
print("Location 3:")
print(f"Wave Height: {wave_height3}")
print(f"Wave Period: {wave_period3}")
print(f"Wave Direction: {wave_direction3}")
print("Location 5:")
print(f"Wave Height: {wave_height5}")
print(f"Wave Period: {wave_period5}")
print(f"Wave Direction: {wave_direction5}")

print("\nPower Calculations:")
print(f"P_E: {P_E}")
print("P_D_model:", [f"{value:.2f}" for value in P_D_model])
print("P_D_ship:", [f"{value:.2f}" for value in P_D_ship])
print("P_S:", [f"{value:.2f}" for value in P_S])
print("P_I:", [f"{value:.2f}" for value in P_I])

print("\nShip Route:")
print(f"Starting Point: {start_point}")
print(f"Ending Point: {end_point}")
print(f"The ship should move at a heading of {heading} degrees.")
print(f"The distance between the points is {distance} kilometers.")
